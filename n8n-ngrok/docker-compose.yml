services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  # n8n automation platform
  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - '${N8N_PORT:-5678}:5678'
    environment:
      # Database configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}

      # n8n configuration
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - GENERIC_TIMEZONE=${TIMEZONE}
      - TZ=${TIMEZONE}

      # Webhook configuration - will be updated by ngrok-updater
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}

      # Security and CORS
      - N8N_SECURE_COOKIE=false
      - N8N_PROTOCOL=http
      - N8N_HOST=0.0.0.0

      # Disable user management for development
      - N8N_USER_MANAGEMENT_DISABLED=true

    volumes:
      - n8n_data:/home/node/.n8n
      # Mount webhook URL file to be updated by ngrok-updater
      - ./webhook-url.txt:/tmp/webhook-url.txt:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:5678/healthz',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - n8n-network

  # ngrok tunnel service
  ngrok:
    image: ngrok/ngrok:latest
    restart: always
    command:
      - 'http'
      - 'n8n:5678'
      - '--log=stdout'
      - '--authtoken=${NGROK_AUTHTOKEN}'
      - '--region=${NGROK_REGION:-us}'
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    ports:
      - '4040:4040' # ngrok web interface
    depends_on:
      n8n:
        condition: service_healthy
    healthcheck:
      test:
        ['CMD', 'timeout', '3', 'bash', '-c', 'echo > /dev/tcp/localhost/4040']
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - n8n-network

  # Service to automatically update n8n webhook URL with ngrok URL
  ngrok-updater:
    build:
      context: .
      dockerfile: Dockerfile.updater
    restart: always
    environment:
      - NGROK_API_URL=http://ngrok:4040/api/tunnels
      - N8N_API_URL=http://n8n:5678/api/v1
      - UPDATE_INTERVAL=${UPDATE_INTERVAL:-30}
      - WEBHOOK_FILE_PATH=/tmp/webhook-url.txt
    volumes:
      - ./webhook-url.txt:/tmp/webhook-url.txt
      - ./logs:/app/logs
    depends_on:
      ngrok:
        condition: service_healthy
    networks:
      - n8n-network

  # Optional: Ollama for AI workflows
  ollama:
    image: ollama/ollama
    container_name: ollama
    restart: unless-stopped
    ports:
      - '${OLLAMA_PORT:-11434}:11434'
    volumes:
      - ollama_data:/root/.ollama
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:11434']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - n8n-network
    profiles:
      - ollama # Use with: docker compose --profile ollama up

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  ollama_data:
    driver: local

networks:
  n8n-network:
    driver: bridge
